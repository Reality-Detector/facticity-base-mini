{
    "address": "0xDB4638693068c8fd627F180D3fC921D93E98e10a",
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_stakingToken",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "name": "AlreadyAdmin",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "InsufficientBalance",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "InsufficientStake",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NotAdmin",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "OnlyOwner",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "OnlyOwnerOrAdmin",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "StakingPaused",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ZeroAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ZeroAmount",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "admin",
            "type": "address"
          }
        ],
        "name": "AdminAdded",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "admin",
            "type": "address"
          }
        ],
        "name": "AdminRemoved",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "Staked",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "bool",
            "name": "paused",
            "type": "bool"
          }
        ],
        "name": "StakingPausedUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "Unstaked",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "Withdrawal",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_admin",
            "type": "address"
          }
        ],
        "name": "addAdmin",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "admins",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getAvailableForWithdrawal",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getTotalStaked",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_user",
            "type": "address"
          }
        ],
        "name": "getUserStake",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getVaultBalance",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_address",
            "type": "address"
          }
        ],
        "name": "isAdmin",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "isStakingPaused",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_admin",
            "type": "address"
          }
        ],
        "name": "removeAdmin",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "stake",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "stakingToken",
        "outputs": [
          {
            "internalType": "contract IERC20",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "toggleStakingPause",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalStaked",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "unstake",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "unstakeAll",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_user",
            "type": "address"
          }
        ],
        "name": "unstakeAllForUser",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_user",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "unstakeForUser",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "userStakes",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_amount",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "_to",
            "type": "address"
          }
        ],
        "name": "withdraw",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "transactionHash": "0xef4e4d1d04dd83b9c27bed2768cfd6a9ccc5c74f6b659ad0c80a90e412b82873",
    "receipt": {
      "to": null,
      "from": "0x26E76B18D4A132A9397C46af11e4688BDB602E92",
      "contractAddress": "0xDB4638693068c8fd627F180D3fC921D93E98e10a",
      "transactionIndex": 22,
      "gasUsed": "1003522",
      "logsBloom": "0x
      "blockHash": "0x6725a0d3a7367b7bf40fef154e556b74d97de102a5b1806fdfbe0489a9124e3a",
      "transactionHash": "0xef4e4d1d04dd83b9c27bed2768cfd6a9ccc5c74f6b659ad0c80a90e412b82873",
      "logs": [],
      "blockNumber": 30862024,
      "cumulativeGasUsed": "14933217",
      "status": 1,
      "byzantium": true
    },
    "args": [
      "0x1234567890123456789012345678901234567890"
    ],
    "numDeployments": 1,
    "solcInputHash": "b2696075e8ac2f513ec8f96e88a36260",
    "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwnerOrAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"StakingPausedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableForWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStakingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleStakingPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unstakeAllForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"custom:security\":\"Admins can withdraw excess funds but not user staked tokens\",\"details\":\"Only the owner can call this function. Admin will have withdrawal privileges.\",\"params\":{\"_admin\":\"The address to be granted admin privileges\"}},\"removeAdmin(address)\":{\"details\":\"Only the owner can call this function\",\"params\":{\"_admin\":\"The address to have admin privileges revoked\"}},\"stake(uint256)\":{\"custom:effects\":\"Increases user's stake balance and total staked amount\",\"custom:requirements\":\"Staking must not be paused and amount must be > 0\",\"details\":\"Transfers tokens from user to contract and updates staking balances\",\"params\":{\"_amount\":\"The amount of tokens to stake\"}},\"toggleStakingPause()\":{\"custom:security\":\"Emergency function to halt new staking during incidents\",\"details\":\"Only the owner can pause/unpause staking. Affects new stakes only.\"},\"unstake(uint256)\":{\"custom:effects\":\"Decreases user's stake balance and total staked amount\",\"custom:requirements\":\"User must have sufficient staked balance\",\"details\":\"Reduces user's stake balance and transfers tokens back to user\",\"params\":{\"_amount\":\"The amount of tokens to unstake\"}},\"unstakeAll()\":{\"custom:effects\":\"Sets user's stake balance to 0 and reduces total staked\",\"custom:requirements\":\"User must have a non-zero stake balance\",\"details\":\"Withdraws the entire stake balance for the calling user\"},\"unstakeAllForUser(address)\":{\"custom:effects\":\"Sets user's stake balance to 0 and reduces total staked accordingly\",\"custom:security\":\"Admin emergency function for user assistance or protocol management\",\"details\":\"Only owner or admin can call this function. All user's tokens are returned.\",\"params\":{\"_user\":\"The address of the user whose entire stake will be unstaked\"}},\"unstakeForUser(address,uint256)\":{\"custom:effects\":\"Decreases specified user's stake balance and total staked amount\",\"custom:security\":\"Admin emergency function for user assistance or protocol management\",\"details\":\"Only owner or admin can call this function. Tokens are sent to the user.\",\"params\":{\"_amount\":\"The amount of tokens to unstake for the user\",\"_user\":\"The address of the user whose tokens will be unstaked\"}},\"withdraw(uint256,address)\":{\"custom:effects\":\"Transfers excess vault tokens without affecting user balances\",\"custom:security\":\"Only allows withdrawal of excess funds beyond user stakes\",\"details\":\"Only owner or admin can withdraw. Cannot withdraw user staked tokens.\",\"params\":{\"_amount\":\"The amount of excess tokens to withdraw\",\"_to\":\"The address to receive the withdrawn tokens\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAdmin(address)\":{\"notice\":\"Adds a new admin to the contract\"},\"removeAdmin(address)\":{\"notice\":\"Removes admin privileges from an address\"},\"stake(uint256)\":{\"notice\":\"Stakes tokens into the vault\"},\"toggleStakingPause()\":{\"notice\":\"Toggles the staking pause state\"},\"unstake(uint256)\":{\"notice\":\"Unstakes a specific amount of tokens\"},\"unstakeAll()\":{\"notice\":\"Unstakes all of the user's staked tokens\"},\"unstakeAllForUser(address)\":{\"notice\":\"Admin function to unstake all tokens for a specific user\"},\"unstakeForUser(address,uint256)\":{\"notice\":\"Admin function to unstake tokens on behalf of a user\"},\"withdraw(uint256,address)\":{\"notice\":\"Withdraws excess tokens from the vault (not user staked funds)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/StakingVault.sol\":\"StakingVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/staking/StakingVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract StakingVault is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    error OnlyOwner();\\n    error OnlyOwnerOrAdmin();\\n    error ZeroAddress();\\n    error AlreadyAdmin();\\n    error NotAdmin();\\n    error ZeroAmount();\\n    error InsufficientBalance();\\n    error InsufficientStake();\\n    error StakingPaused();\\n\\n    IERC20 public immutable stakingToken;\\n    address public immutable owner;\\n\\n    mapping(address => bool) public admins;\\n    mapping(address => uint256) public userStakes;\\n\\n    uint256 public totalStaked;\\n    bool public isStakingPaused;\\n\\n    event AdminAdded(address indexed admin);\\n    event AdminRemoved(address indexed admin);\\n    event Staked(address indexed user, uint256 amount);\\n    event Unstaked(address indexed user, uint256 amount);\\n    event StakingPausedUpdated(bool paused);\\n    event Withdrawal(address indexed user, address indexed to, uint256 amount);\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert OnlyOwner();\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrAdmin() {\\n        if (msg.sender != owner && !admins[msg.sender])\\n            revert OnlyOwnerOrAdmin();\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        if (isStakingPaused) revert StakingPaused();\\n        _;\\n    }\\n\\n    constructor(address _stakingToken) {\\n        if (_stakingToken == address(0)) revert ZeroAddress();\\n        stakingToken = IERC20(_stakingToken);\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Adds a new admin to the contract\\n     * @dev Only the owner can call this function. Admin will have withdrawal privileges.\\n     * @param _admin The address to be granted admin privileges\\n     * @custom:security Admins can withdraw excess funds but not user staked tokens\\n     */\\n    function addAdmin(address _admin) external onlyOwner {\\n        if (_admin == address(0)) revert ZeroAddress();\\n        if (admins[_admin]) revert AlreadyAdmin();\\n\\n        admins[_admin] = true;\\n        emit AdminAdded(_admin);\\n    }\\n\\n    /**\\n     * @notice Removes admin privileges from an address\\n     * @dev Only the owner can call this function\\n     * @param _admin The address to have admin privileges revoked\\n     */\\n    function removeAdmin(address _admin) external onlyOwner {\\n        if (!admins[_admin]) revert NotAdmin();\\n\\n        admins[_admin] = false;\\n        emit AdminRemoved(_admin);\\n    }\\n\\n    function isAdmin(address _address) external view returns (bool) {\\n        return admins[_address];\\n    }\\n\\n    /**\\n     * @notice Toggles the staking pause state\\n     * @dev Only the owner can pause/unpause staking. Affects new stakes only.\\n     * @custom:security Emergency function to halt new staking during incidents\\n     */\\n    function toggleStakingPause() external onlyOwner {\\n        isStakingPaused = !isStakingPaused;\\n        emit StakingPausedUpdated(isStakingPaused);\\n    }\\n\\n    /**\\n     * @notice Stakes tokens into the vault\\n     * @dev Transfers tokens from user to contract and updates staking balances\\n     * @param _amount The amount of tokens to stake\\n     * @custom:requirements Staking must not be paused and amount must be > 0\\n     * @custom:effects Increases user's stake balance and total staked amount\\n     */\\n    function stake(uint256 _amount) external whenNotPaused {\\n        if (_amount == 0) revert ZeroAmount();\\n\\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        userStakes[msg.sender] += _amount;\\n        totalStaked += _amount;\\n\\n        emit Staked(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Unstakes a specific amount of tokens\\n     * @dev Reduces user's stake balance and transfers tokens back to user\\n     * @param _amount The amount of tokens to unstake\\n     * @custom:requirements User must have sufficient staked balance\\n     * @custom:effects Decreases user's stake balance and total staked amount\\n     */\\n    function unstake(uint256 _amount) external {\\n        if (_amount == 0) revert ZeroAmount();\\n        if (userStakes[msg.sender] < _amount) revert InsufficientStake();\\n\\n        userStakes[msg.sender] -= _amount;\\n        totalStaked -= _amount;\\n\\n        stakingToken.safeTransfer(msg.sender, _amount);\\n\\n        emit Unstaked(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Unstakes all of the user's staked tokens\\n     * @dev Withdraws the entire stake balance for the calling user\\n     * @custom:requirements User must have a non-zero stake balance\\n     * @custom:effects Sets user's stake balance to 0 and reduces total staked\\n     */\\n    function unstakeAll() external {\\n        uint256 stakedAmount = userStakes[msg.sender];\\n        if (stakedAmount == 0) revert InsufficientStake();\\n\\n        userStakes[msg.sender] = 0;\\n        totalStaked -= stakedAmount;\\n\\n        stakingToken.safeTransfer(msg.sender, stakedAmount);\\n\\n        emit Unstaked(msg.sender, stakedAmount);\\n    }\\n\\n    /**\\n     * @notice Admin function to unstake tokens on behalf of a user\\n     * @dev Only owner or admin can call this function. Tokens are sent to the user.\\n     * @param _user The address of the user whose tokens will be unstaked\\n     * @param _amount The amount of tokens to unstake for the user\\n     * @custom:security Admin emergency function for user assistance or protocol management\\n     * @custom:effects Decreases specified user's stake balance and total staked amount\\n     */\\n    function unstakeForUser(\\n        address _user,\\n        uint256 _amount\\n    ) external onlyOwnerOrAdmin {\\n        if (_amount == 0) revert ZeroAmount();\\n        if (userStakes[_user] < _amount) revert InsufficientStake();\\n\\n        userStakes[_user] -= _amount;\\n        totalStaked -= _amount;\\n\\n        stakingToken.safeTransfer(_user, _amount);\\n\\n        emit Unstaked(_user, _amount);\\n    }\\n\\n    /**\\n     * @notice Admin function to unstake all tokens for a specific user\\n     * @dev Only owner or admin can call this function. All user's tokens are returned.\\n     * @param _user The address of the user whose entire stake will be unstaked\\n     * @custom:security Admin emergency function for user assistance or protocol management\\n     * @custom:effects Sets user's stake balance to 0 and reduces total staked accordingly\\n     */\\n    function unstakeAllForUser(address _user) external onlyOwnerOrAdmin {\\n        uint256 stakedAmount = userStakes[_user];\\n        if (stakedAmount == 0) revert InsufficientStake();\\n\\n        userStakes[_user] = 0;\\n        totalStaked -= stakedAmount;\\n\\n        stakingToken.safeTransfer(_user, stakedAmount);\\n\\n        emit Unstaked(_user, stakedAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraws excess tokens from the vault (not user staked funds)\\n     * @dev Only owner or admin can withdraw. Cannot withdraw user staked tokens.\\n     * @param _amount The amount of excess tokens to withdraw\\n     * @param _to The address to receive the withdrawn tokens\\n     * @custom:security Only allows withdrawal of excess funds beyond user stakes\\n     * @custom:effects Transfers excess vault tokens without affecting user balances\\n     */\\n    function withdraw(uint256 _amount, address _to) external onlyOwnerOrAdmin {\\n        if (_to == address(0)) revert ZeroAddress();\\n        if (_amount == 0) revert ZeroAmount();\\n\\n        uint256 availableForWithdrawal = getAvailableForWithdrawal();\\n        if (availableForWithdrawal < _amount) revert InsufficientBalance();\\n\\n        stakingToken.safeTransfer(_to, _amount);\\n        emit Withdrawal(msg.sender, _to, _amount);\\n    }\\n\\n    function getVaultBalance() public view returns (uint256) {\\n        return stakingToken.balanceOf(address(this));\\n    }\\n\\n    function getUserStake(address _user) public view returns (uint256) {\\n        return userStakes[_user];\\n    }\\n\\n    function getTotalStaked() public view returns (uint256) {\\n        return totalStaked;\\n    }\\n\\n    function getAvailableForWithdrawal() public view returns (uint256) {\\n        uint256 balance = getVaultBalance();\\n        return balance > totalStaked ? balance - totalStaked : 0;\\n    }\\n}\\n\",\"keccak256\":\"0xc135fd34582bc6061630633f726e673a110bd15e568585f7418ae38b4b5f0474\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60c060405234801561001057600080fd5b506040516111db3803806111db83398101604081905261002f91610070565b60016000556001600160a01b03811661005b5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03166080523360a0526100a0565b60006020828403121561008257600080fd5b81516001600160a01b038116811461009957600080fd5b9392505050565b60805160a0516110c961011260003960008181610249015281816102e201528181610437015281816104cd015281816106d701528181610848015261091601526000818161020c015281816103c001528181610629015281816107e101528181610a560152610b3701526110c96000f3fe608060405234801561001057600080fd5b50600436106100fb5760003560e01c8062f714ce146101005780630917e77614610115578063167f141a1461012c5780631785f53c146101345780631ea7ca891461014757806324d7806c146101645780632e17de781461019057806335322f37146101a3578063429b62e5146101ab57806352fca038146101ce5780635526af0b146101e157806370480275146101f457806372f702f314610207578063817b1cd21461023b5780638da5cb5b146102445780638da7ad231461026b578063a694fc3a1461028b578063bbadc93a1461029e578063c44633e9146102c7578063ed12e8ef146102cf575b600080fd5b61011361010e366004610ede565b6102d7565b005b6003545b6040519081526020015b60405180910390f35b61011361042c565b610113610142366004610f0a565b6104c2565b6004546101549060ff1681565b6040519015158152602001610123565b610154610172366004610f0a565b6001600160a01b031660009081526001602052604090205460ff1690565b61011361019e366004610f2c565b61058d565b610113610677565b6101546101b9366004610f0a565b60016020526000908152604090205460ff1681565b6101136101dc366004610f45565b6106cc565b6101136101ef366004610f0a565b61083d565b610113610202366004610f0a565b61090b565b61022e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516101239190610f6f565b61011960035481565b61022e7f000000000000000000000000000000000000000000000000000000000000000081565b610119610279366004610f0a565b60026020526000908152604090205481565b610113610299366004610f2c565b610a04565b6101196102ac366004610f0a565b6001600160a01b031660009081526002602052604090205490565b610119610aed565b610119610b1d565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480159061032057503360009081526001602052604090205460ff16155b1561033e57604051636f0cab8b60e11b815260040160405180910390fd5b6001600160a01b0381166103655760405163d92e233d60e01b815260040160405180910390fd5b8160000361038657604051631f2a200560e01b815260040160405180910390fd5b6000610390610aed565b9050828110156103b357604051631e9acf1760e31b815260040160405180910390fd5b6103e76001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168385610bb2565b6040518381526001600160a01b0383169033907f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63989060200160405180910390a3505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461047557604051635fc483c560e01b815260040160405180910390fd5b6004805460ff8082161560ff1990921682179092556040519116151581527fcd3558c83dfc8718cd8d706c135d743763f92eaa337eaa6b858cb34836e63ad39060200160405180910390a1565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461050b57604051635fc483c560e01b815260040160405180910390fd5b6001600160a01b03811660009081526001602052604090205460ff1661054457604051637bfa4b9f60e01b815260040160405180910390fd5b6001600160a01b038116600081815260016020526040808220805460ff19169055517fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f9190a250565b806000036105ae57604051631f2a200560e01b815260040160405180910390fd5b336000908152600260205260409020548111156105de576040516378de4a6960e11b815260040160405180910390fd5b33600090815260026020526040812080548392906105fd908490610f99565b9250508190555080600360008282546106169190610f99565b9091555061065090506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383610bb2565b6040518181523390600080516020611074833981519152906020015b60405180910390a250565b33600090815260026020526040812054908190036106a8576040516378de4a6960e11b815260040160405180910390fd5b33600090815260026020526040812081905560038054839290610616908490610f99565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480159061071557503360009081526001602052604090205460ff16155b1561073357604051636f0cab8b60e11b815260040160405180910390fd5b8060000361075457604051631f2a200560e01b815260040160405180910390fd5b6001600160a01b03821660009081526002602052604090205481111561078d576040516378de4a6960e11b815260040160405180910390fd5b6001600160a01b038216600090815260026020526040812080548392906107b5908490610f99565b9250508190555080600360008282546107ce9190610f99565b9091555061080890506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383610bb2565b816001600160a01b03166000805160206110748339815191528260405161083191815260200190565b60405180910390a25050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480159061088657503360009081526001602052604090205460ff16155b156108a457604051636f0cab8b60e11b815260040160405180910390fd5b6001600160a01b038116600090815260026020526040812054908190036108de576040516378de4a6960e11b815260040160405180910390fd5b6001600160a01b0382166000908152600260205260408120819055600380548392906107ce908490610f99565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461095457604051635fc483c560e01b815260040160405180910390fd5b6001600160a01b03811661097b5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03811660009081526001602052604090205460ff16156109b557604051631c3681a560e11b815260040160405180910390fd5b6001600160a01b0381166000818152600160208190526040808320805460ff1916909217909155517f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e3399190a250565b60045460ff1615610a28576040516326d1807b60e01b815260040160405180910390fd5b80600003610a4957604051631f2a200560e01b815260040160405180910390fd5b610a7e6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084610c1a565b3360009081526002602052604081208054839290610a9d908490610fb2565b925050819055508060036000828254610ab69190610fb2565b909155505060405181815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200161066c565b600080610af8610b1d565b90506003548111610b0a576000610b17565b600354610b179082610f99565b91505090565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610b6c903090600401610f6f565b602060405180830381865afa158015610b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bad9190610fc5565b905090565b6040516001600160a01b038316602482015260448101829052610c1590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610c58565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610c529085906323b872dd60e01b90608401610bde565b50505050565b6000610cad826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610d329092919063ffffffff16565b9050805160001480610cce575080806020019051810190610cce9190610fde565b610c155760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b6060610d418484600085610d49565b949350505050565b606082471015610daa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610d29565b600080866001600160a01b03168587604051610dc69190611024565b60006040518083038185875af1925050503d8060008114610e03576040519150601f19603f3d011682016040523d82523d6000602084013e610e08565b606091505b5091509150610e1987838387610e24565b979650505050505050565b60608315610e93578251600003610e8c576001600160a01b0385163b610e8c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d29565b5081610d41565b610d418383815115610ea85781518083602001fd5b8060405162461bcd60e51b8152600401610d299190611040565b80356001600160a01b0381168114610ed957600080fd5b919050565b60008060408385031215610ef157600080fd5b82359150610f0160208401610ec2565b90509250929050565b600060208284031215610f1c57600080fd5b610f2582610ec2565b9392505050565b600060208284031215610f3e57600080fd5b5035919050565b60008060408385031215610f5857600080fd5b610f6183610ec2565b946020939093013593505050565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610fac57610fac610f83565b92915050565b80820180821115610fac57610fac610f83565b600060208284031215610fd757600080fd5b5051919050565b600060208284031215610ff057600080fd5b81518015158114610f2557600080fd5b60005b8381101561101b578181015183820152602001611003565b50506000910152565b60008251611036818460208701611000565b9190910192915050565b602081526000825180602084015261105f816040850160208701611000565b601f01601f1916919091016040019291505056fe0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75a26469706673582212208c2b52e377a5a0ac4ea9c9ecfcd7338d85011ff32ca95ce75f26f4d1252e63a064736f6c63430008180033",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100fb5760003560e01c8062f714ce146101005780630917e77614610115578063167f141a1461012c5780631785f53c146101345780631ea7ca891461014757806324d7806c146101645780632e17de781461019057806335322f37146101a3578063429b62e5146101ab57806352fca038146101ce5780635526af0b146101e157806370480275146101f457806372f702f314610207578063817b1cd21461023b5780638da5cb5b146102445780638da7ad231461026b578063a694fc3a1461028b578063bbadc93a1461029e578063c44633e9146102c7578063ed12e8ef146102cf575b600080fd5b61011361010e366004610ede565b6102d7565b005b6003545b6040519081526020015b60405180910390f35b61011361042c565b610113610142366004610f0a565b6104c2565b6004546101549060ff1681565b6040519015158152602001610123565b610154610172366004610f0a565b6001600160a01b031660009081526001602052604090205460ff1690565b61011361019e366004610f2c565b61058d565b610113610677565b6101546101b9366004610f0a565b60016020526000908152604090205460ff1681565b6101136101dc366004610f45565b6106cc565b6101136101ef366004610f0a565b61083d565b610113610202366004610f0a565b61090b565b61022e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516101239190610f6f565b61011960035481565b61022e7f000000000000000000000000000000000000000000000000000000000000000081565b610119610279366004610f0a565b60026020526000908152604090205481565b610113610299366004610f2c565b610a04565b6101196102ac366004610f0a565b6001600160a01b031660009081526002602052604090205490565b610119610aed565b610119610b1d565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480159061032057503360009081526001602052604090205460ff16155b1561033e57604051636f0cab8b60e11b815260040160405180910390fd5b6001600160a01b0381166103655760405163d92e233d60e01b815260040160405180910390fd5b8160000361038657604051631f2a200560e01b815260040160405180910390fd5b6000610390610aed565b9050828110156103b357604051631e9acf1760e31b815260040160405180910390fd5b6103e76001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168385610bb2565b6040518381526001600160a01b0383169033907f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63989060200160405180910390a3505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461047557604051635fc483c560e01b815260040160405180910390fd5b6004805460ff8082161560ff1990921682179092556040519116151581527fcd3558c83dfc8718cd8d706c135d743763f92eaa337eaa6b858cb34836e63ad39060200160405180910390a1565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461050b57604051635fc483c560e01b815260040160405180910390fd5b6001600160a01b03811660009081526001602052604090205460ff1661054457604051637bfa4b9f60e01b815260040160405180910390fd5b6001600160a01b038116600081815260016020526040808220805460ff19169055517fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f9190a250565b806000036105ae57604051631f2a200560e01b815260040160405180910390fd5b336000908152600260205260409020548111156105de576040516378de4a6960e11b815260040160405180910390fd5b33600090815260026020526040812080548392906105fd908490610f99565b9250508190555080600360008282546106169190610f99565b9091555061065090506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383610bb2565b6040518181523390600080516020611074833981519152906020015b60405180910390a250565b33600090815260026020526040812054908190036106a8576040516378de4a6960e11b815260040160405180910390fd5b33600090815260026020526040812081905560038054839290610616908490610f99565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480159061071557503360009081526001602052604090205460ff16155b1561073357604051636f0cab8b60e11b815260040160405180910390fd5b8060000361075457604051631f2a200560e01b815260040160405180910390fd5b6001600160a01b03821660009081526002602052604090205481111561078d576040516378de4a6960e11b815260040160405180910390fd5b6001600160a01b038216600090815260026020526040812080548392906107b5908490610f99565b9250508190555080600360008282546107ce9190610f99565b9091555061080890506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383610bb2565b816001600160a01b03166000805160206110748339815191528260405161083191815260200190565b60405180910390a25050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480159061088657503360009081526001602052604090205460ff16155b156108a457604051636f0cab8b60e11b815260040160405180910390fd5b6001600160a01b038116600090815260026020526040812054908190036108de576040516378de4a6960e11b815260040160405180910390fd5b6001600160a01b0382166000908152600260205260408120819055600380548392906107ce908490610f99565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461095457604051635fc483c560e01b815260040160405180910390fd5b6001600160a01b03811661097b5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03811660009081526001602052604090205460ff16156109b557604051631c3681a560e11b815260040160405180910390fd5b6001600160a01b0381166000818152600160208190526040808320805460ff1916909217909155517f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e3399190a250565b60045460ff1615610a28576040516326d1807b60e01b815260040160405180910390fd5b80600003610a4957604051631f2a200560e01b815260040160405180910390fd5b610a7e6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084610c1a565b3360009081526002602052604081208054839290610a9d908490610fb2565b925050819055508060036000828254610ab69190610fb2565b909155505060405181815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200161066c565b600080610af8610b1d565b90506003548111610b0a576000610b17565b600354610b179082610f99565b91505090565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610b6c903090600401610f6f565b602060405180830381865afa158015610b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bad9190610fc5565b905090565b6040516001600160a01b038316602482015260448101829052610c1590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610c58565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610c529085906323b872dd60e01b90608401610bde565b50505050565b6000610cad826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610d329092919063ffffffff16565b9050805160001480610cce575080806020019051810190610cce9190610fde565b610c155760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b6060610d418484600085610d49565b949350505050565b606082471015610daa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610d29565b600080866001600160a01b03168587604051610dc69190611024565b60006040518083038185875af1925050503d8060008114610e03576040519150601f19603f3d011682016040523d82523d6000602084013e610e08565b606091505b5091509150610e1987838387610e24565b979650505050505050565b60608315610e93578251600003610e8c576001600160a01b0385163b610e8c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d29565b5081610d41565b610d418383815115610ea85781518083602001fd5b8060405162461bcd60e51b8152600401610d299190611040565b80356001600160a01b0381168114610ed957600080fd5b919050565b60008060408385031215610ef157600080fd5b82359150610f0160208401610ec2565b90509250929050565b600060208284031215610f1c57600080fd5b610f2582610ec2565b9392505050565b600060208284031215610f3e57600080fd5b5035919050565b60008060408385031215610f5857600080fd5b610f6183610ec2565b946020939093013593505050565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610fac57610fac610f83565b92915050565b80820180821115610fac57610fac610f83565b600060208284031215610fd757600080fd5b5051919050565b600060208284031215610ff057600080fd5b81518015158114610f2557600080fd5b60005b8381101561101b578181015183820152602001611003565b50506000910152565b60008251611036818460208701611000565b9190910192915050565b602081526000825180602084015261105f816040850160208701611000565b601f01601f1916919091016040019291505056fe0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75a26469706673582212208c2b52e377a5a0ac4ea9c9ecfcd7338d85011ff32ca95ce75f26f4d1252e63a064736f6c63430008180033",
    "devdoc": {
      "kind": "dev",
      "methods": {
        "addAdmin(address)": {
          "custom:security": "Admins can withdraw excess funds but not user staked tokens",
          "details": "Only the owner can call this function. Admin will have withdrawal privileges.",
          "params": {
            "_admin": "The address to be granted admin privileges"
          }
        },
        "removeAdmin(address)": {
          "details": "Only the owner can call this function",
          "params": {
            "_admin": "The address to have admin privileges revoked"
          }
        },
        "stake(uint256)": {
          "custom:effects": "Increases user's stake balance and total staked amount",
          "custom:requirements": "Staking must not be paused and amount must be > 0",
          "details": "Transfers tokens from user to contract and updates staking balances",
          "params": {
            "_amount": "The amount of tokens to stake"
          }
        },
        "toggleStakingPause()": {
          "custom:security": "Emergency function to halt new staking during incidents",
          "details": "Only the owner can pause/unpause staking. Affects new stakes only."
        },
        "unstake(uint256)": {
          "custom:effects": "Decreases user's stake balance and total staked amount",
          "custom:requirements": "User must have sufficient staked balance",
          "details": "Reduces user's stake balance and transfers tokens back to user",
          "params": {
            "_amount": "The amount of tokens to unstake"
          }
        },
        "unstakeAll()": {
          "custom:effects": "Sets user's stake balance to 0 and reduces total staked",
          "custom:requirements": "User must have a non-zero stake balance",
          "details": "Withdraws the entire stake balance for the calling user"
        },
        "unstakeAllForUser(address)": {
          "custom:effects": "Sets user's stake balance to 0 and reduces total staked accordingly",
          "custom:security": "Admin emergency function for user assistance or protocol management",
          "details": "Only owner or admin can call this function. All user's tokens are returned.",
          "params": {
            "_user": "The address of the user whose entire stake will be unstaked"
          }
        },
        "unstakeForUser(address,uint256)": {
          "custom:effects": "Decreases specified user's stake balance and total staked amount",
          "custom:security": "Admin emergency function for user assistance or protocol management",
          "details": "Only owner or admin can call this function. Tokens are sent to the user.",
          "params": {
            "_amount": "The amount of tokens to unstake for the user",
            "_user": "The address of the user whose tokens will be unstaked"
          }
        },
        "withdraw(uint256,address)": {
          "custom:effects": "Transfers excess vault tokens without affecting user balances",
          "custom:security": "Only allows withdrawal of excess funds beyond user stakes",
          "details": "Only owner or admin can withdraw. Cannot withdraw user staked tokens.",
          "params": {
            "_amount": "The amount of excess tokens to withdraw",
            "_to": "The address to receive the withdrawn tokens"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "addAdmin(address)": {
          "notice": "Adds a new admin to the contract"
        },
        "removeAdmin(address)": {
          "notice": "Removes admin privileges from an address"
        },
        "stake(uint256)": {
          "notice": "Stakes tokens into the vault"
        },
        "toggleStakingPause()": {
          "notice": "Toggles the staking pause state"
        },
        "unstake(uint256)": {
          "notice": "Unstakes a specific amount of tokens"
        },
        "unstakeAll()": {
          "notice": "Unstakes all of the user's staked tokens"
        },
        "unstakeAllForUser(address)": {
          "notice": "Admin function to unstake all tokens for a specific user"
        },
        "unstakeForUser(address,uint256)": {
          "notice": "Admin function to unstake tokens on behalf of a user"
        },
        "withdraw(uint256,address)": {
          "notice": "Withdraws excess tokens from the vault (not user staked funds)"
        }
      },
      "version": 1
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 10,
          "contract": "contracts/staking/StakingVault.sol:StakingVault",
          "label": "_status",
          "offset": 0,
          "slot": "0",
          "type": "t_uint256"
        },
        {
          "astId": 922,
          "contract": "contracts/staking/StakingVault.sol:StakingVault",
          "label": "admins",
          "offset": 0,
          "slot": "1",
          "type": "t_mapping(t_address,t_bool)"
        },
        {
          "astId": 926,
          "contract": "contracts/staking/StakingVault.sol:StakingVault",
          "label": "userStakes",
          "offset": 0,
          "slot": "2",
          "type": "t_mapping(t_address,t_uint256)"
        },
        {
          "astId": 928,
          "contract": "contracts/staking/StakingVault.sol:StakingVault",
          "label": "totalStaked",
          "offset": 0,
          "slot": "3",
          "type": "t_uint256"
        },
        {
          "astId": 930,
          "contract": "contracts/staking/StakingVault.sol:StakingVault",
          "label": "isStakingPaused",
          "offset": 0,
          "slot": "4",
          "type": "t_bool"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        },
        "t_bool": {
          "encoding": "inplace",
          "label": "bool",
          "numberOfBytes": "1"
        },
        "t_mapping(t_address,t_bool)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => bool)",
          "numberOfBytes": "32",
          "value": "t_bool"
        },
        "t_mapping(t_address,t_uint256)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => uint256)",
          "numberOfBytes": "32",
          "value": "t_uint256"
        },
        "t_uint256": {
          "encoding": "inplace",
          "label": "uint256",
          "numberOfBytes": "32"
        }
      }
    }
  }