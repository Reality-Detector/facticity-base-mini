{
  "address": "0xa2594dEd25aD058a04f3068120f3ce56bB3EEBcB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "StakingVault__InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingVault__InsufficientStake",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingVault__InsufficientUnstakeRequest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingVault__InvalidLockPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingVault__NoUnstakeRequest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingVault__UnstakeStillLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingVault__ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingVault__ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLockPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLockPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "updatedBy",
          "type": "address"
        }
      ],
      "name": "LockPeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UnstakeCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "availableAt",
          "type": "uint256"
        }
      ],
      "name": "UnstakeRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UnstakeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_LOCK_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_LOCK_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "cancelUnstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getAllUserUnstakeRequests",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakingVault.UnstakeRequest[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAvailableForWithdrawal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getAvailableUnstakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLockPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getRemainingUnstakeLockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalUnstakeRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUnstakeUnlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserUnstakeRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getUserUnstakeRequestByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakingVault.UnstakeRequest",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserUnstakeRequestCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "grantAdminRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isUnstakeLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "requestUnstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestUnstakeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "revokeAdminRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUnstakeRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "unstakeRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newLockPeriod",
          "type": "uint256"
        }
      ],
      "name": "updateLockPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAllUnstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawUnstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x324d056431de70459cc4000e0bb8a388fd9b17d91831e8b0cc8ca4fbd133758e",
  "receipt": {
    "to": null,
    "from": "0x26E76B18D4A132A9397C46af11e4688BDB602E92",
    "contractAddress": "0xa2594dEd25aD058a04f3068120f3ce56bB3EEBcB",
    "transactionIndex": 4,
    "gasUsed": "2326384",
    "logsBloom": "0x
    "blockHash": "0x359c2b5a28685ef0c8c6ba929eef7c33d002ed92f6974c691e77324865c65c81",
    "transactionHash": "0x324d056431de70459cc4000e0bb8a388fd9b17d91831e8b0cc8ca4fbd133758e",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 31095460,
        "transactionHash": "0x324d056431de70459cc4000e0bb8a388fd9b17d91831e8b0cc8ca4fbd133758e",
        "address": "0xa2594dEd25aD058a04f3068120f3ce56bB3EEBcB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000026e76b18d4a132a9397c46af11e4688bdb602e92"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x359c2b5a28685ef0c8c6ba929eef7c33d002ed92f6974c691e77324865c65c81"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 31095460,
        "transactionHash": "0x324d056431de70459cc4000e0bb8a388fd9b17d91831e8b0cc8ca4fbd133758e",
        "address": "0xa2594dEd25aD058a04f3068120f3ce56bB3EEBcB",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000026e76b18d4a132a9397c46af11e4688bdb602e92",
          "0x00000000000000000000000026e76b18d4a132a9397c46af11e4688bdb602e92"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x359c2b5a28685ef0c8c6ba929eef7c33d002ed92f6974c691e77324865c65c81"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 31095460,
        "transactionHash": "0x324d056431de70459cc4000e0bb8a388fd9b17d91831e8b0cc8ca4fbd133758e",
        "address": "0xa2594dEd25aD058a04f3068120f3ce56bB3EEBcB",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x00000000000000000000000026e76b18d4a132a9397c46af11e4688bdb602e92",
          "0x00000000000000000000000026e76b18d4a132a9397c46af11e4688bdb602e92"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x359c2b5a28685ef0c8c6ba929eef7c33d002ed92f6974c691e77324865c65c81"
      }
    ],
    "blockNumber": 31095460,
    "cumulativeGasUsed": "2697179",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x363E6Ba86D5a723C0C7d7fD9B360091293bc0019"
  ],
  "numDeployments": 1,
  "solcInputHash": "6c04fa92cb71cfdf705b5afb0bd5ba7b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"StakingVault__InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingVault__InsufficientStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingVault__InsufficientUnstakeRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingVault__InvalidLockPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingVault__NoUnstakeRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingVault__UnstakeStillLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingVault__ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingVault__ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLockPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLockPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"}],\"name\":\"LockPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"availableAt\",\"type\":\"uint256\"}],\"name\":\"UnstakeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOCK_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LOCK_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cancelUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAllUserUnstakeRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingVault.UnstakeRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableForWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAvailableUnstakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRemainingUnstakeLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUnstakeRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnstakeUnlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserUnstakeRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserUnstakeRequestByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingVault.UnstakeRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserUnstakeRequestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"grantAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isUnstakeLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestUnstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"revokeAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnstakeRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unstakeRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLockPeriod\",\"type\":\"uint256\"}],\"name\":\"updateLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"cancelUnstake(uint256)\":{\"custom:effects\":\"Moves tokens back from newest unstake requests to staked balance\",\"custom:requirements\":\"User must have sufficient unstake requests\",\"params\":{\"_amount\":\"The amount to cancel from unstake requests\"}},\"getAllUserUnstakeRequests(address)\":{\"params\":{\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"Array of all unstake requests\"}},\"getAvailableUnstakeAmount(address)\":{\"params\":{\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"The total amount available for immediate withdrawal\"}},\"getLockPeriod()\":{\"returns\":{\"_0\":\"The current lock period in seconds\"}},\"getRemainingUnstakeLockTime(address)\":{\"params\":{\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"The remaining lock time in seconds (0 if unlocked)\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTotalUnstakeRequests()\":{\"returns\":{\"_0\":\"The total amount of tokens waiting for withdrawal\"}},\"getUnstakeUnlockTimestamp(address)\":{\"params\":{\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"The timestamp when the oldest unstake request will be available for withdrawal\"}},\"getUserUnstakeRequest(address)\":{\"params\":{\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"The total amount of tokens in all unstake requests\"}},\"getUserUnstakeRequestByIndex(address,uint256)\":{\"params\":{\"_index\":\"The index of the unstake request\",\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"The unstake request details\"}},\"getUserUnstakeRequestCount(address)\":{\"params\":{\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"The number of unstake requests in queue\"}},\"grantAdminRole(address)\":{\"custom:security\":\"Admins can withdraw excess funds but not user staked tokens\",\"details\":\"Only the owner can call this function. Admin will have withdrawal privileges.\",\"params\":{\"_admin\":\"The address to be granted admin privileges\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAdmin(address)\":{\"params\":{\"_address\":\"The address to check\"},\"returns\":{\"_0\":\"Whether the address has admin role\"}},\"isUnstakeLocked(address)\":{\"params\":{\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"True if the oldest unstake request is locked, false otherwise\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseStaking()\":{\"custom:security\":\"Emergency function to halt new staking during incidents\",\"details\":\"Only the owner can pause staking. Affects new stakes only.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"requestUnstake(uint256)\":{\"custom:effects\":\"Creates unstake request in FIFO queue with withdrawal delay\",\"custom:requirements\":\"User must have sufficient staked balance\",\"details\":\"Creates an unstake request that will be available for withdrawal after lockPeriod\",\"params\":{\"_amount\":\"The amount of tokens to request for unstaking\"}},\"requestUnstakeAll()\":{\"custom:effects\":\"Moves entire stake to unstake request queue with withdrawal delay\",\"custom:requirements\":\"User must have a non-zero stake balance\",\"details\":\"Creates an unstake request for the entire stake balance\"},\"revokeAdminRole(address)\":{\"details\":\"Only the owner can call this function\",\"params\":{\"_admin\":\"The address to have admin privileges revoked\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"stake(uint256)\":{\"custom:effects\":\"Increases user's stake balance and total staked amount\",\"custom:requirements\":\"Staking must not be paused and amount must be > 0\",\"details\":\"Transfers tokens from user to contract and updates staking balances\",\"params\":{\"_amount\":\"The amount of tokens to stake\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"params\":{\"newOwner\":\"The address of the new owner\"}},\"unpauseStaking()\":{\"details\":\"Only the owner can unpause staking.\"},\"updateLockPeriod(uint256)\":{\"custom:bounds\":\"Lock period must be between MIN_LOCK_PERIOD and MAX_LOCK_PERIOD\",\"custom:security\":\"Only affects future stakes, existing stakes keep their original lock period\",\"details\":\"Only owner or admin can call this function. Does not affect existing stakes.\",\"params\":{\"_newLockPeriod\":\"The new lock period in seconds\"}},\"withdraw(uint256,address)\":{\"custom:effects\":\"Transfers excess vault tokens without affecting user balances\",\"custom:security\":\"Only allows withdrawal of excess funds beyond user stakes\",\"details\":\"Only owner or admin can withdraw. Cannot withdraw user staked tokens.\",\"params\":{\"_amount\":\"The amount of excess tokens to withdraw\",\"_to\":\"The address to receive the withdrawn tokens\"}},\"withdrawAllUnstake()\":{\"custom:effects\":\"Transfers all available tokens to user and removes processed requests\",\"custom:requirements\":\"User must have unlocked unstake requests\",\"details\":\"Processes all unlocked unstake requests in FIFO order\"},\"withdrawUnstake(uint256)\":{\"custom:effects\":\"Transfers tokens to user and removes processed requests from queue\",\"custom:requirements\":\"User must have sufficient unlocked unstake requests\",\"details\":\"Processes oldest unstake requests that have passed the lock period\",\"params\":{\"_amount\":\"The amount of tokens to withdraw from unstake requests\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelUnstake(uint256)\":{\"notice\":\"Cancels unstake requests and returns tokens to staked balance (LIFO)\"},\"getAllUserUnstakeRequests(address)\":{\"notice\":\"Gets all unstake requests for a user\"},\"getAvailableUnstakeAmount(address)\":{\"notice\":\"Gets the total available amount for withdrawal (unlocked requests)\"},\"getLockPeriod()\":{\"notice\":\"Gets the current lock period\"},\"getRemainingUnstakeLockTime(address)\":{\"notice\":\"Gets the remaining lock time for the oldest unstake request\"},\"getTotalUnstakeRequests()\":{\"notice\":\"Gets the total amount of tokens in unstake requests\"},\"getUnstakeUnlockTimestamp(address)\":{\"notice\":\"Gets the unlock timestamp for the oldest unstake request\"},\"getUserUnstakeRequest(address)\":{\"notice\":\"Gets the user's total unstake request amount\"},\"getUserUnstakeRequestByIndex(address,uint256)\":{\"notice\":\"Gets a specific unstake request by index\"},\"getUserUnstakeRequestCount(address)\":{\"notice\":\"Gets the number of unstake requests for a user\"},\"grantAdminRole(address)\":{\"notice\":\"Grants admin role to an address\"},\"isAdmin(address)\":{\"notice\":\"Checks if an address has admin role\"},\"isUnstakeLocked(address)\":{\"notice\":\"Checks if the oldest unstake request is currently locked\"},\"pauseStaking()\":{\"notice\":\"Pauses staking functionality\"},\"requestUnstake(uint256)\":{\"notice\":\"Requests to unstake a specific amount of tokens\"},\"requestUnstakeAll()\":{\"notice\":\"Requests to unstake all of the user's staked tokens\"},\"revokeAdminRole(address)\":{\"notice\":\"Revokes admin role from an address\"},\"stake(uint256)\":{\"notice\":\"Stakes tokens into the vault\"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership and admin role to a new owner\"},\"unpauseStaking()\":{\"notice\":\"Unpauses staking functionality\"},\"updateLockPeriod(uint256)\":{\"notice\":\"Updates the lock period for new stakes\"},\"withdraw(uint256,address)\":{\"notice\":\"Withdraws excess tokens from the vault (not user staked funds)\"},\"withdrawAllUnstake()\":{\"notice\":\"Withdraws all available tokens from completed unstake requests\"},\"withdrawUnstake(uint256)\":{\"notice\":\"Withdraws tokens from completed unstake requests (FIFO)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/StakingVault.sol\":\"StakingVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/staking/StakingVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// @title StakingVault For Facticity Token (FACY)\\n// @author Facticity\\n// @notice A secure ERC20 token staking vault with admin controls\\n// @dev This contract implements a staking vault for in-app activities\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\ncontract StakingVault is AccessControl, Ownable, Pausable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Roles\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    // Custom Errors\\n    error StakingVault__ZeroAddress();\\n    error StakingVault__ZeroAmount();\\n    error StakingVault__InsufficientBalance();\\n    error StakingVault__InsufficientStake();\\n    error StakingVault__NoUnstakeRequest();\\n    error StakingVault__UnstakeStillLocked();\\n    error StakingVault__InsufficientUnstakeRequest();\\n    error StakingVault__InvalidLockPeriod();\\n\\n    struct UnstakeRequest {\\n        uint256 amount;\\n        uint256 timestamp;\\n        uint256 id;\\n    }\\n\\n    IERC20 public immutable stakingToken;\\n    mapping(address => uint256) public userStakes;\\n    mapping(address => UnstakeRequest[]) public unstakeRequests; // Queue of unstake requests\\n    uint256 public totalStaked;\\n    uint256 public totalUnstakeRequests; // Total amount in unstake queue\\n    uint256 public lockPeriod;\\n    uint256 private _nextUnstakeId;\\n    \\n    // Constants for lock period bounds\\n    uint256 public constant MIN_LOCK_PERIOD = 1 days;\\n    uint256 public constant MAX_LOCK_PERIOD = 365 days;\\n\\n    event Staked(address indexed user, uint256 amount, uint256 timestamp);\\n    event UnstakeRequested(address indexed user, uint256 id, uint256 amount, uint256 availableAt);\\n    event UnstakeWithdrawn(address indexed user, uint256 id, uint256 amount);\\n    event UnstakeCancelled(address indexed user, uint256 id, uint256 amount);\\n    event Withdrawal(address indexed user, address indexed to, uint256 amount);\\n    event LockPeriodUpdated(uint256 oldLockPeriod, uint256 newLockPeriod, address updatedBy);\\n\\n    constructor(address _stakingToken) Ownable() {\\n        if (_stakingToken == address(0)) revert StakingVault__ZeroAddress();\\n        \\n        stakingToken = IERC20(_stakingToken);\\n        lockPeriod = 14 days; // Default 14 days lock period\\n        _nextUnstakeId = 1;\\n        \\n        // Set deployer as both owner and admin\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Grants admin role to an address\\n     * @dev Only the owner can call this function. Admin will have withdrawal privileges.\\n     * @param _admin The address to be granted admin privileges\\n     * @custom:security Admins can withdraw excess funds but not user staked tokens\\n     */\\n    function grantAdminRole(address _admin) external onlyOwner {\\n        if (_admin == address(0)) revert StakingVault__ZeroAddress();\\n        _grantRole(ADMIN_ROLE, _admin);\\n    }\\n\\n    /**\\n     * @notice Revokes admin role from an address\\n     * @dev Only the owner can call this function\\n     * @param _admin The address to have admin privileges revoked\\n     */\\n    function revokeAdminRole(address _admin) external onlyOwner {\\n        _revokeRole(ADMIN_ROLE, _admin);\\n    }\\n\\n    /**\\n     * @notice Checks if an address has admin role\\n     * @param _address The address to check\\n     * @return Whether the address has admin role\\n     */\\n    function isAdmin(address _address) external view returns (bool) {\\n        return hasRole(ADMIN_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Pauses staking functionality\\n     * @dev Only the owner can pause staking. Affects new stakes only.\\n     * @custom:security Emergency function to halt new staking during incidents\\n     */\\n    function pauseStaking() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses staking functionality\\n     * @dev Only the owner can unpause staking.\\n     */\\n    function unpauseStaking() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Stakes tokens into the vault\\n     * @dev Transfers tokens from user to contract and updates staking balances\\n     * @param _amount The amount of tokens to stake\\n     * @custom:requirements Staking must not be paused and amount must be > 0\\n     * @custom:effects Increases user's stake balance and total staked amount\\n     */\\n    function stake(uint256 _amount) external whenNotPaused nonReentrant {\\n        if (_amount == 0) revert StakingVault__ZeroAmount();\\n\\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        userStakes[msg.sender] += _amount;\\n        totalStaked += _amount;\\n\\n        emit Staked(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Requests to unstake a specific amount of tokens\\n     * @dev Creates an unstake request that will be available for withdrawal after lockPeriod\\n     * @param _amount The amount of tokens to request for unstaking\\n     * @custom:requirements User must have sufficient staked balance\\n     * @custom:effects Creates unstake request in FIFO queue with withdrawal delay\\n     */\\n    function requestUnstake(uint256 _amount) external nonReentrant {\\n        if (_amount == 0) revert StakingVault__ZeroAmount();\\n        if (userStakes[msg.sender] < _amount) revert StakingVault__InsufficientStake();\\n\\n        // Move from staked to unstake request\\n        userStakes[msg.sender] -= _amount;\\n        totalStaked -= _amount;\\n        \\n        // Add to unstake queue\\n        UnstakeRequest memory newRequest = UnstakeRequest({\\n            amount: _amount,\\n            timestamp: block.timestamp,\\n            id: _nextUnstakeId++\\n        });\\n        unstakeRequests[msg.sender].push(newRequest);\\n        totalUnstakeRequests += _amount;\\n\\n        uint256 availableAt = block.timestamp + lockPeriod;\\n        emit UnstakeRequested(msg.sender, newRequest.id, _amount, availableAt);\\n    }\\n\\n    /**\\n     * @notice Requests to unstake all of the user's staked tokens\\n     * @dev Creates an unstake request for the entire stake balance\\n     * @custom:requirements User must have a non-zero stake balance\\n     * @custom:effects Moves entire stake to unstake request queue with withdrawal delay\\n     */\\n    function requestUnstakeAll() external nonReentrant {\\n        uint256 stakedAmount = userStakes[msg.sender];\\n        if (stakedAmount == 0) revert StakingVault__InsufficientStake();\\n\\n        // Move from staked to unstake request\\n        userStakes[msg.sender] = 0;\\n        totalStaked -= stakedAmount;\\n        \\n        // Add to unstake queue\\n        UnstakeRequest memory newRequest = UnstakeRequest({\\n            amount: stakedAmount,\\n            timestamp: block.timestamp,\\n            id: _nextUnstakeId++\\n        });\\n        unstakeRequests[msg.sender].push(newRequest);\\n        totalUnstakeRequests += stakedAmount;\\n\\n        uint256 availableAt = block.timestamp + lockPeriod;\\n        emit UnstakeRequested(msg.sender, newRequest.id, stakedAmount, availableAt);\\n    }\\n\\n    /**\\n     * @notice Withdraws tokens from completed unstake requests (FIFO)\\n     * @dev Processes oldest unstake requests that have passed the lock period\\n     * @param _amount The amount of tokens to withdraw from unstake requests\\n     * @custom:requirements User must have sufficient unlocked unstake requests\\n     * @custom:effects Transfers tokens to user and removes processed requests from queue\\n     */\\n    function withdrawUnstake(uint256 _amount) external nonReentrant {\\n        if (_amount == 0) revert StakingVault__ZeroAmount();\\n        if (unstakeRequests[msg.sender].length == 0) revert StakingVault__NoUnstakeRequest();\\n\\n        uint256 remainingToWithdraw = _amount;\\n        uint256 totalWithdrawn = 0;\\n        \\n        // Process requests from oldest to newest (FIFO)\\n        for (uint256 i = 0; i < unstakeRequests[msg.sender].length && remainingToWithdraw > 0; ) {\\n            UnstakeRequest storage request = unstakeRequests[msg.sender][i];\\n            \\n            // Check if this request is unlocked\\n            if (block.timestamp < request.timestamp + lockPeriod) {\\n                revert StakingVault__UnstakeStillLocked();\\n            }\\n            \\n            uint256 withdrawFromThisRequest;\\n            if (request.amount <= remainingToWithdraw) {\\n                // Withdraw entire request\\n                withdrawFromThisRequest = request.amount;\\n                emit UnstakeWithdrawn(msg.sender, request.id, withdrawFromThisRequest);\\n                \\n                // Remove this request by swapping with last and popping\\n                unstakeRequests[msg.sender][i] = unstakeRequests[msg.sender][unstakeRequests[msg.sender].length - 1];\\n                unstakeRequests[msg.sender].pop();\\n                // Don't increment i since we moved a new element to position i\\n            } else {\\n                // Partial withdrawal from this request\\n                withdrawFromThisRequest = remainingToWithdraw;\\n                request.amount -= withdrawFromThisRequest;\\n                emit UnstakeWithdrawn(msg.sender, request.id, withdrawFromThisRequest);\\n                i++; // Move to next request\\n            }\\n            \\n            remainingToWithdraw -= withdrawFromThisRequest;\\n            totalWithdrawn += withdrawFromThisRequest;\\n        }\\n        \\n        if (remainingToWithdraw > 0) {\\n            revert StakingVault__InsufficientUnstakeRequest();\\n        }\\n        \\n        totalUnstakeRequests -= totalWithdrawn;\\n        stakingToken.safeTransfer(msg.sender, totalWithdrawn);\\n    }\\n\\n    /**\\n     * @notice Withdraws all available tokens from completed unstake requests\\n     * @dev Processes all unlocked unstake requests in FIFO order\\n     * @custom:requirements User must have unlocked unstake requests\\n     * @custom:effects Transfers all available tokens to user and removes processed requests\\n     */\\n    function withdrawAllUnstake() external nonReentrant {\\n        if (unstakeRequests[msg.sender].length == 0) revert StakingVault__NoUnstakeRequest();\\n\\n        uint256 totalWithdrawn = 0;\\n        \\n        // Process all unlocked requests from oldest to newest\\n        for (uint256 i = 0; i < unstakeRequests[msg.sender].length; ) {\\n            UnstakeRequest storage request = unstakeRequests[msg.sender][i];\\n            \\n            // Check if this request is unlocked\\n            if (block.timestamp >= request.timestamp + lockPeriod) {\\n                totalWithdrawn += request.amount;\\n                emit UnstakeWithdrawn(msg.sender, request.id, request.amount);\\n                \\n                // Remove this request by swapping with last and popping\\n                unstakeRequests[msg.sender][i] = unstakeRequests[msg.sender][unstakeRequests[msg.sender].length - 1];\\n                unstakeRequests[msg.sender].pop();\\n                // Don't increment i since we moved a new element to position i\\n            } else {\\n                // Stop at first locked request (FIFO order)\\n                break;\\n            }\\n        }\\n        \\n        if (totalWithdrawn == 0) {\\n            revert StakingVault__UnstakeStillLocked();\\n        }\\n        \\n        totalUnstakeRequests -= totalWithdrawn;\\n        stakingToken.safeTransfer(msg.sender, totalWithdrawn);\\n    }\\n\\n    /**\\n     * @notice Withdraws excess tokens from the vault (not user staked funds)\\n     * @dev Only owner or admin can withdraw. Cannot withdraw user staked tokens.\\n     * @param _amount The amount of excess tokens to withdraw\\n     * @param _to The address to receive the withdrawn tokens\\n     * @custom:security Only allows withdrawal of excess funds beyond user stakes\\n     * @custom:effects Transfers excess vault tokens without affecting user balances\\n     */\\n    function withdraw(uint256 _amount, address _to) external onlyRole(ADMIN_ROLE) nonReentrant {\\n        if (_to == address(0)) revert StakingVault__ZeroAddress();\\n        if (_amount == 0) revert StakingVault__ZeroAmount();\\n\\n        uint256 availableForWithdrawal = getAvailableForWithdrawal();\\n        if (availableForWithdrawal < _amount) revert StakingVault__InsufficientBalance();\\n\\n        stakingToken.safeTransfer(_to, _amount);\\n        emit Withdrawal(msg.sender, _to, _amount);\\n    }\\n\\n    function getVaultBalance() public view returns (uint256) {\\n        return stakingToken.balanceOf(address(this));\\n    }\\n\\n    function getUserStake(address _user) public view returns (uint256) {\\n        return userStakes[_user];\\n    }\\n\\n    function getTotalStaked() public view returns (uint256) {\\n        return totalStaked;\\n    }\\n\\n    function getAvailableForWithdrawal() public view returns (uint256) {\\n        uint256 balance = getVaultBalance();\\n        uint256 totalCommitted = totalStaked + totalUnstakeRequests;\\n        return balance > totalCommitted ? balance - totalCommitted : 0;\\n    }\\n\\n    /**\\n     * @notice Gets the unlock timestamp for the oldest unstake request\\n     * @param _user The address of the user\\n     * @return The timestamp when the oldest unstake request will be available for withdrawal\\n     */\\n    function getUnstakeUnlockTimestamp(address _user) public view returns (uint256) {\\n        if (unstakeRequests[_user].length == 0) return 0;\\n        return unstakeRequests[_user][0].timestamp + lockPeriod;\\n    }\\n\\n    /**\\n     * @notice Checks if the oldest unstake request is currently locked\\n     * @param _user The address of the user\\n     * @return True if the oldest unstake request is locked, false otherwise\\n     */\\n    function isUnstakeLocked(address _user) public view returns (bool) {\\n        if (unstakeRequests[_user].length == 0) return false;\\n        return block.timestamp < unstakeRequests[_user][0].timestamp + lockPeriod;\\n    }\\n\\n    /**\\n     * @notice Gets the remaining lock time for the oldest unstake request\\n     * @param _user The address of the user\\n     * @return The remaining lock time in seconds (0 if unlocked)\\n     */\\n    function getRemainingUnstakeLockTime(address _user) public view returns (uint256) {\\n        if (unstakeRequests[_user].length == 0) return 0;\\n        uint256 unlockTime = unstakeRequests[_user][0].timestamp + lockPeriod;\\n        if (block.timestamp >= unlockTime) return 0;\\n        return unlockTime - block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Cancels unstake requests and returns tokens to staked balance (LIFO)\\n     * @param _amount The amount to cancel from unstake requests\\n     * @custom:requirements User must have sufficient unstake requests\\n     * @custom:effects Moves tokens back from newest unstake requests to staked balance\\n     */\\n    function cancelUnstake(uint256 _amount) external nonReentrant {\\n        if (_amount == 0) revert StakingVault__ZeroAmount();\\n        if (unstakeRequests[msg.sender].length == 0) revert StakingVault__NoUnstakeRequest();\\n\\n        uint256 remainingToCancel = _amount;\\n        uint256 totalCancelled = 0;\\n        \\n        // Cancel from newest to oldest (LIFO for cancellation)\\n        while (unstakeRequests[msg.sender].length > 0 && remainingToCancel > 0) {\\n            uint256 lastIndex = unstakeRequests[msg.sender].length - 1;\\n            UnstakeRequest storage lastRequest = unstakeRequests[msg.sender][lastIndex];\\n            \\n            uint256 cancelFromThisRequest;\\n            if (lastRequest.amount <= remainingToCancel) {\\n                // Cancel entire request\\n                cancelFromThisRequest = lastRequest.amount;\\n                emit UnstakeCancelled(msg.sender, lastRequest.id, cancelFromThisRequest);\\n                unstakeRequests[msg.sender].pop();\\n            } else {\\n                // Partial cancellation\\n                cancelFromThisRequest = remainingToCancel;\\n                lastRequest.amount -= cancelFromThisRequest;\\n                emit UnstakeCancelled(msg.sender, lastRequest.id, cancelFromThisRequest);\\n            }\\n            \\n            remainingToCancel -= cancelFromThisRequest;\\n            totalCancelled += cancelFromThisRequest;\\n        }\\n        \\n        if (remainingToCancel > 0) {\\n            revert StakingVault__InsufficientUnstakeRequest();\\n        }\\n        \\n        // Move cancelled amount back to staked\\n        totalUnstakeRequests -= totalCancelled;\\n        userStakes[msg.sender] += totalCancelled;\\n        totalStaked += totalCancelled;\\n    }\\n\\n    /**\\n     * @notice Gets the user's total unstake request amount\\n     * @param _user The address of the user\\n     * @return The total amount of tokens in all unstake requests\\n     */\\n    function getUserUnstakeRequest(address _user) public view returns (uint256) {\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < unstakeRequests[_user].length; i++) {\\n            total += unstakeRequests[_user][i].amount;\\n        }\\n        return total;\\n    }\\n    \\n    /**\\n     * @notice Gets the number of unstake requests for a user\\n     * @param _user The address of the user\\n     * @return The number of unstake requests in queue\\n     */\\n    function getUserUnstakeRequestCount(address _user) public view returns (uint256) {\\n        return unstakeRequests[_user].length;\\n    }\\n    \\n    /**\\n     * @notice Gets a specific unstake request by index\\n     * @param _user The address of the user\\n     * @param _index The index of the unstake request\\n     * @return The unstake request details\\n     */\\n    function getUserUnstakeRequestByIndex(address _user, uint256 _index) public view returns (UnstakeRequest memory) {\\n        require(_index < unstakeRequests[_user].length, \\\"Index out of bounds\\\");\\n        return unstakeRequests[_user][_index];\\n    }\\n    \\n    /**\\n     * @notice Gets all unstake requests for a user\\n     * @param _user The address of the user\\n     * @return Array of all unstake requests\\n     */\\n    function getAllUserUnstakeRequests(address _user) public view returns (UnstakeRequest[] memory) {\\n        return unstakeRequests[_user];\\n    }\\n    \\n    /**\\n     * @notice Gets the total available amount for withdrawal (unlocked requests)\\n     * @param _user The address of the user\\n     * @return The total amount available for immediate withdrawal\\n     */\\n    function getAvailableUnstakeAmount(address _user) public view returns (uint256) {\\n        uint256 available = 0;\\n        for (uint256 i = 0; i < unstakeRequests[_user].length; i++) {\\n            if (block.timestamp >= unstakeRequests[_user][i].timestamp + lockPeriod) {\\n                available += unstakeRequests[_user][i].amount;\\n            } else {\\n                break; // Stop at first locked request (FIFO order)\\n            }\\n        }\\n        return available;\\n    }\\n\\n    /**\\n     * @notice Gets the total amount of tokens in unstake requests\\n     * @return The total amount of tokens waiting for withdrawal\\n     */\\n    function getTotalUnstakeRequests() public view returns (uint256) {\\n        return totalUnstakeRequests;\\n    }\\n\\n    /**\\n     * @notice Updates the lock period for new stakes\\n     * @dev Only owner or admin can call this function. Does not affect existing stakes.\\n     * @param _newLockPeriod The new lock period in seconds\\n     * @custom:security Only affects future stakes, existing stakes keep their original lock period\\n     * @custom:bounds Lock period must be between MIN_LOCK_PERIOD and MAX_LOCK_PERIOD\\n     */\\n    function updateLockPeriod(uint256 _newLockPeriod) external onlyRole(ADMIN_ROLE) {\\n        if (_newLockPeriod < MIN_LOCK_PERIOD || _newLockPeriod > MAX_LOCK_PERIOD) {\\n            revert StakingVault__InvalidLockPeriod();\\n        }\\n        \\n        uint256 oldLockPeriod = lockPeriod;\\n        lockPeriod = _newLockPeriod;\\n        \\n        emit LockPeriodUpdated(oldLockPeriod, _newLockPeriod, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Gets the current lock period\\n     * @return The current lock period in seconds\\n     */\\n    function getLockPeriod() external view returns (uint256) {\\n        return lockPeriod;\\n    }\\n\\n    /**\\n     * @notice Transfers ownership and admin role to a new owner\\n     * @param newOwner The address of the new owner\\n     */\\n    function transferOwnership(address newOwner) public override onlyOwner {\\n        if (newOwner == address(0)) revert StakingVault__ZeroAddress();\\n        \\n        address oldOwner = owner();\\n        \\n        // Revoke admin roles from old owner\\n        _revokeRole(DEFAULT_ADMIN_ROLE, oldOwner);\\n        _revokeRole(ADMIN_ROLE, oldOwner);\\n        \\n        // Grant admin roles to new owner\\n        _grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        _grantRole(ADMIN_ROLE, newOwner);\\n        \\n        // Transfer ownership\\n        _transferOwnership(newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x73a0115efb251d4a5f30cdf1ba34b7b65a324d746007980484ae65ad6b49c661\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102245760003560e01c8062f714ce1461022957806301ffc9a71461023e5780630917e776146102665780632309572114610278578063248a9ca31461028b57806324d7806c1461029e5780632b187b2b146102b15780632f2ff15d146102c457806336568abe146102d7578063385757e9146102ea578063385dc3df146102f2578063399d8294146102fc5780633c39f2d0146103045780633fd8b02f146103175780634bb0ad72146103205780634d32f487146103405780635740ca68146103495780635959380a146103695780635c975abb1461037157806366442a0614610379578063715018a61461039b57806372f702f3146103a357806375b238fc146103d7578063817b1cd2146103ec5780638da5cb5b146103f55780638da7ad23146103fd57806391d148541461041d57806391db7b0d1461043057806393f4bcde146104435780639a19c7b01461044b578063a217fddf1461045e578063a694fc3a14610466578063ac96469714610479578063bbadc93a1461048c578063c26dc516146104b5578063c44633e9146104c8578063c634b78e146104d0578063c87117ee146104e3578063d547741f146104f6578063d59094b714610509578063e1f5dfef1461051c578063e43db1931461052f578063ed12e8ef14610537578063f2fde38b1461053f578063f50154d714610552578063f55401621461057b578063f999c50614610586575b600080fd5b61023c61023736600461227e565b61058e565b005b61025161024c3660046122aa565b6106a7565b60405190151581526020015b60405180910390f35b6005545b60405190815260200161025d565b61023c6102863660046122d4565b6106de565b61026a6102993660046122d4565b610852565b6102516102ac3660046122ed565b610867565b61023c6102bf3660046122d4565b610881565b61023c6102d236600461227e565b610ac3565b61023c6102e536600461227e565b610adf565b61023c610b62565b61026a6201518081565b60065461026a565b6102516103123660046122ed565b610da5565b61026a60075481565b61033361032e3660046122ed565b610e1c565b60405161025d9190612321565b61026a60065481565b61035c61035736600461236f565b610eaf565b60405161025d9190612399565b61023c610f99565b6102516110d7565b61038c61038736600461236f565b6110e7565b60405161025d939291906123a7565b61023c611129565b6103ca7f000000000000000000000000000000000000000000000000000000000000000081565b60405161025d91906123bd565b61026a60008051602061260283398151915281565b61026a60055481565b6103ca61113b565b61026a61040b3660046122ed565b60036020526000908152604090205481565b61025161042b36600461227e565b61114a565b61023c61043e3660046122d4565b611173565b61023c611209565b61023c6104593660046122ed565b611219565b61026a600081565b61023c6104743660046122d4565b611239565b61023c6104873660046122d4565b611322565b61026a61049a3660046122ed565b6001600160a01b031660009081526003602052604090205490565b61026a6104c33660046122ed565b611615565b61026a6116a9565b61023c6104de3660046122ed565b6116e9565b61026a6104f13660046122ed565b611730565b61023c61050436600461227e565b6117ad565b61026a6105173660046122ed565b6117c9565b61026a61052a3660046122ed565b611838565b60075461026a565b61026a611907565b61023c61054d3660046122ed565b61199c565b61026a6105603660046122ed565b6001600160a01b031660009081526004602052604090205490565b61026a6301e1338081565b61023c611a26565b6000805160206126028339815191526105a681611a36565b6105ae611a40565b6001600160a01b0382166105d55760405163077d3c6b60e11b815260040160405180910390fd5b826000036105f6576040516302537e9560e41b815260040160405180910390fd5b60006106006116a9565b90508381101561062357604051632715ead960e21b815260040160405180910390fd5b6106576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168486611a97565b6040518481526001600160a01b0384169033907f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63989060200160405180910390a3506106a26001600255565b505050565b60006001600160e01b03198216637965db0b60e01b14806106d857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6106e6611a40565b80600003610707576040516302537e9560e41b815260040160405180910390fd5b3360009081526003602052604090205481111561073757604051631dea2f7560e31b815260040160405180910390fd5b33600090815260036020526040812080548392906107569084906123e7565b92505081905550806005600082825461076f91906123e7565b909155505060408051606081018252828152426020820152600880546000938301918461079b836123fa565b909155509052336000908152600460209081526040808320805460018181018355918552838520865160039092020190815592850151908301558301516002909101556006805492935084929091906107f5908490612413565b909155505060075460009061080a9042612413565b9050336001600160a01b03166000805160206126228339815191528360400151858460405161083b939291906123a7565b60405180910390a2505061084f6001600255565b50565b60009081526020819052604090206001015490565b60006106d86000805160206126028339815191528361114a565b610889611a40565b806000036108aa576040516302537e9560e41b815260040160405180910390fd5b3360009081526004602052604081205490036108d9576040516374fd081960e01b815260040160405180910390fd5b8060005b33600090815260046020526040902054158015906108fb5750600082115b15610a43573360009081526004602052604081205461091c906001906123e7565b336000908152600460205260408120805492935090918390811061094257610942612426565b906000526020600020906003020190506000848260000154116109d857508054600282015460405133916000805160206125c2833981519152916109889190859061243c565b60405180910390a23360009081526004602052604090208054806109ae576109ae61244a565b60008281526020812060036000199093019283020181815560018101829055600201559055610a23565b849050808260000160008282546109ef91906123e7565b9091555050600282015460405133916000805160206125c283398151915291610a1a9190859061243c565b60405180910390a25b610a2d81866123e7565b9450610a398185612413565b93505050506108dd565b8115610a6257604051633de6b88560e11b815260040160405180910390fd5b8060066000828254610a7491906123e7565b90915550503360009081526003602052604081208054839290610a98908490612413565b925050819055508060056000828254610ab19190612413565b909155505060016002555061084f9050565b610acc82610852565b610ad581611a36565b6106a28383611afa565b6001600160a01b0381163314610b545760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610b5e8282611b7e565b5050565b610b6a611a40565b336000908152600460205260408120549003610b99576040516374fd081960e01b815260040160405180910390fd5b6000805b33600090815260046020526040902054811015610d2a57336000908152600460205260408120805483908110610bd557610bd5612426565b906000526020600020906003020190506007548160010154610bf79190612413565b4210610d1e578054610c099084612413565b6002820154825460405192955033926000805160206125e283398151915292610c3392909161243c565b60405180910390a23360009081526004602052604090208054610c58906001906123e7565b81548110610c6857610c68612426565b906000526020600020906003020160046000336001600160a01b03166001600160a01b031681526020019081526020016000208381548110610cac57610cac612426565b600091825260208083208454600390930201918255600180850154908301556002938401549390910192909255338152600490915260409020805480610cf457610cf461244a565b60008281526020812060036000199093019283020181815560018101829055600201559055610d24565b50610d2a565b50610b9d565b5080600003610d4c57604051639b935c3360e01b815260040160405180910390fd5b8060066000828254610d5e91906123e7565b90915550610d9890506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383611a97565b50610da36001600255565b565b6001600160a01b0381166000908152600460205260408120548103610dcc57506000919050565b6007546001600160a01b03831660009081526004602052604081208054909190610df857610df8612426565b906000526020600020906003020160010154610e149190612413565b421092915050565b6001600160a01b0381166000908152600460209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610ea45783829060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190610e54565b505050509050919050565b610ed360405180606001604052806000815260200160008152602001600081525090565b6001600160a01b0383166000908152600460205260409020548210610f305760405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b6044820152606401610b4b565b6001600160a01b0383166000908152600460205260409020805483908110610f5a57610f5a612426565b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905092915050565b610fa1611a40565b3360009081526003602052604081205490819003610fd257604051631dea2f7560e31b815260040160405180910390fd5b33600090815260036020526040812081905560058054839290610ff69084906123e7565b9091555050604080516060810182528281524260208201526008805460009383019184611022836123fa565b9091555090523360009081526004602090815260408083208054600181810183559185528385208651600390920201908155928501519083015583015160029091015560068054929350849290919061107c908490612413565b90915550506007546000906110919042612413565b9050336001600160a01b0316600080516020612622833981519152836040015185846040516110c2939291906123a7565b60405180910390a2505050610da36001600255565b600154600160a01b900460ff1690565b6004602052816000526040600020818154811061110357600080fd5b600091825260209091206003909102018054600182015460029092015490935090915083565b611131611be3565b610da36000611c42565b6001546001600160a01b031690565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008051602061260283398151915261118b81611a36565b6201518082108061119f57506301e1338082115b156111bd57604051638d212e0d60e01b815260040160405180910390fd5b60078054908390556040805182815260208101859052338183015290517f2043fa5a49797f7a1c2629f68eab59ee10a5c456255ac94bd0b78fbc24219daf9181900360600190a1505050565b611211611be3565b610da3611c94565b611221611be3565b61084f60008051602061260283398151915282611b7e565b611241611ce3565b611249611a40565b8060000361126a576040516302537e9560e41b815260040160405180910390fd5b61129f6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084611d2b565b33600090815260036020526040812080548392906112be908490612413565b9250508190555080600560008282546112d79190612413565b909155505060405133907f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee9090611310908490429061243c565b60405180910390a261084f6001600255565b61132a611a40565b8060000361134b576040516302537e9560e41b815260040160405180910390fd5b33600090815260046020526040812054900361137a576040516374fd081960e01b815260040160405180910390fd5b806000805b336000908152600460205260409020548110801561139d5750600083115b1561159d573360009081526004602052604081208054839081106113c3576113c3612426565b9060005260206000209060030201905060075481600101546113e59190612413565b42101561140557604051639b935c3360e01b815260040160405180910390fd5b60008482600001541161152657508054600282015460405133916000805160206125e28339815191529161143b9190859061243c565b60405180910390a23360009081526004602052604090208054611460906001906123e7565b8154811061147057611470612426565b906000526020600020906003020160046000336001600160a01b03166001600160a01b0316815260200190815260200160002084815481106114b4576114b4612426565b6000918252602080832084546003909302019182556001808501549083015560029384015493909101929092553381526004909152604090208054806114fc576114fc61244a565b6000828152602081206003600019909301928302018181556001810182905560020155905561157e565b8490508082600001600082825461153d91906123e7565b9091555050600282015460405133916000805160206125e2833981519152916115689190859061243c565b60405180910390a28261157a816123fa565b9350505b61158881866123e7565b94506115948185612413565b9350505061137f565b5081156115bd57604051633de6b88560e11b815260040160405180910390fd5b80600660008282546115cf91906123e7565b9091555061160990506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383611a97565b505061084f6001600255565b6001600160a01b038116600090815260046020526040812054810361163c57506000919050565b6007546001600160a01b03831660009081526004602052604081208054919291839061166a5761166a612426565b9060005260206000209060030201600101546116869190612413565b90508042106116985750600092915050565b6116a242826123e7565b9392505050565b6000806116b4611907565b905060006006546005546116c89190612413565b90508082116116d85760006116e2565b6116e281836123e7565b9250505090565b6116f1611be3565b6001600160a01b0381166117185760405163077d3c6b60e11b815260040160405180910390fd5b61084f60008051602061260283398151915282611afa565b600080805b6001600160a01b0384166000908152600460205260409020548110156117a6576001600160a01b038416600090815260046020526040902080548290811061177f5761177f612426565b9060005260206000209060030201600001548261179c9190612413565b9150600101611735565b5092915050565b6117b682610852565b6117bf81611a36565b6106a28383611b7e565b6001600160a01b03811660009081526004602052604081205481036117f057506000919050565b6007546001600160a01b0383166000908152600460205260408120805490919061181c5761181c612426565b9060005260206000209060030201600101546106d89190612413565b600080805b6001600160a01b0384166000908152600460205260409020548110156117a6576007546001600160a01b038516600090815260046020526040902080548390811061188a5761188a612426565b9060005260206000209060030201600101546118a69190612413565b42106118fa576001600160a01b03841660009081526004602052604090208054829081106118d6576118d6612426565b906000526020600020906003020160000154826118f39190612413565b91506118ff565b6117a6565b60010161183d565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906119569030906004016123bd565b602060405180830381865afa158015611973573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119979190612460565b905090565b6119a4611be3565b6001600160a01b0381166119cb5760405163077d3c6b60e11b815260040160405180910390fd5b60006119d561113b565b90506119e2600082611b7e565b6119fa60008051602061260283398151915282611b7e565b611a05600083611afa565b611a1d60008051602061260283398151915283611afa565b610b5e82611c42565b611a2e611be3565b610da3611d69565b61084f8133611dac565b6002805403611a915760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b4b565b60028055565b6040516001600160a01b0383166024820152604481018290526106a290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611e05565b611b04828261114a565b610b5e576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611b3a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611b88828261114a565b15610b5e576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b33611bec61113b565b6001600160a01b031614610da35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b4b565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611c9c611eda565b6001805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051611cd991906123bd565b60405180910390a1565b611ceb6110d7565b15610da35760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b4b565b6040516001600160a01b0380851660248301528316604482015260648101829052611d639085906323b872dd60e01b90608401611ac3565b50505050565b611d71611ce3565b6001805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611ccc3390565b611db6828261114a565b610b5e57611dc381611f25565b611dce836020611f37565b604051602001611ddf92919061249d565b60408051601f198184030181529082905262461bcd60e51b8252610b4b9160040161250c565b6000611e5a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120d29092919063ffffffff16565b9050805160001480611e7b575080806020019051810190611e7b919061253f565b6106a25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b4b565b611ee26110d7565b610da35760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610b4b565b60606106d86001600160a01b03831660145b60606000611f46836002612561565b611f51906002612413565b6001600160401b03811115611f6857611f68612578565b6040519080825280601f01601f191660200182016040528015611f92576020820181803683370190505b509050600360fc1b81600081518110611fad57611fad612426565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611fdc57611fdc612426565b60200101906001600160f81b031916908160001a9053506000612000846002612561565b61200b906001612413565b90505b6001811115612083576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061203f5761203f612426565b1a60f81b82828151811061205557612055612426565b60200101906001600160f81b031916908160001a90535060049490941c9361207c8161258e565b905061200e565b5083156116a25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b4b565b60606120e184846000856120e9565b949350505050565b60608247101561214a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b4b565b600080866001600160a01b0316858760405161216691906125a5565b60006040518083038185875af1925050503d80600081146121a3576040519150601f19603f3d011682016040523d82523d6000602084013e6121a8565b606091505b50915091506121b9878383876121c4565b979650505050505050565b6060831561223357825160000361222c576001600160a01b0385163b61222c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b4b565b50816120e1565b6120e183838151156122485781518083602001fd5b8060405162461bcd60e51b8152600401610b4b919061250c565b80356001600160a01b038116811461227957600080fd5b919050565b6000806040838503121561229157600080fd5b823591506122a160208401612262565b90509250929050565b6000602082840312156122bc57600080fd5b81356001600160e01b0319811681146116a257600080fd5b6000602082840312156122e657600080fd5b5035919050565b6000602082840312156122ff57600080fd5b6116a282612262565b8051825260208082015190830152604090810151910152565b6020808252825182820181905260009190848201906040850190845b8181101561236357612350838551612308565b928401926060929092019160010161233d565b50909695505050505050565b6000806040838503121561238257600080fd5b61238b83612262565b946020939093013593505050565b606081016106d88284612308565b9283526020830191909152604082015260600190565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052601160045260246000fd5b818103818111156106d8576106d86123d1565b60006001820161240c5761240c6123d1565b5060010190565b808201808211156106d8576106d86123d1565b634e487b7160e01b600052603260045260246000fd5b918252602082015260400190565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561247257600080fd5b5051919050565b60005b8381101561249457818101518382015260200161247c565b50506000910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8152600083516124cf816017850160208801612479565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612500816028840160208801612479565b01602801949350505050565b602081526000825180602084015261252b816040850160208701612479565b601f01601f19169190910160400192915050565b60006020828403121561255157600080fd5b815180151581146116a257600080fd5b80820281158282048414176106d8576106d86123d1565b634e487b7160e01b600052604160045260246000fd5b60008161259d5761259d6123d1565b506000190190565b600082516125b7818460208701612479565b919091019291505056fe61c341979edd8db4659788ba41eb8649b8a01a09e3d02ca5daf4fcc1635e337874ceb61701d382a6998d20d12f85b511b4ad9739d4e58fd9e0ef99068d6c7a72a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756930caaa0f0843978bf16992d58b9fd54913ce2e45b8acdd34f5b44f95419db2a26469706673582212202bedffd0988eed714158bcc415f5e2e2590b49eeb580fb3e7ae3e6ff766ff60a64736f6c63430008180033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "cancelUnstake(uint256)": {
        "custom:effects": "Moves tokens back from newest unstake requests to staked balance",
        "custom:requirements": "User must have sufficient unstake requests",
        "params": {
          "_amount": "The amount to cancel from unstake requests"
        }
      },
      "getAllUserUnstakeRequests(address)": {
        "params": {
          "_user": "The address of the user"
        },
        "returns": {
          "_0": "Array of all unstake requests"
        }
      },
      "getAvailableUnstakeAmount(address)": {
        "params": {
          "_user": "The address of the user"
        },
        "returns": {
          "_0": "The total amount available for immediate withdrawal"
        }
      },
      "getLockPeriod()": {
        "returns": {
          "_0": "The current lock period in seconds"
        }
      },
      "getRemainingUnstakeLockTime(address)": {
        "params": {
          "_user": "The address of the user"
        },
        "returns": {
          "_0": "The remaining lock time in seconds (0 if unlocked)"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTotalUnstakeRequests()": {
        "returns": {
          "_0": "The total amount of tokens waiting for withdrawal"
        }
      },
      "getUnstakeUnlockTimestamp(address)": {
        "params": {
          "_user": "The address of the user"
        },
        "returns": {
          "_0": "The timestamp when the oldest unstake request will be available for withdrawal"
        }
      },
      "getUserUnstakeRequest(address)": {
        "params": {
          "_user": "The address of the user"
        },
        "returns": {
          "_0": "The total amount of tokens in all unstake requests"
        }
      },
      "getUserUnstakeRequestByIndex(address,uint256)": {
        "params": {
          "_index": "The index of the unstake request",
          "_user": "The address of the user"
        },
        "returns": {
          "_0": "The unstake request details"
        }
      },
      "getUserUnstakeRequestCount(address)": {
        "params": {
          "_user": "The address of the user"
        },
        "returns": {
          "_0": "The number of unstake requests in queue"
        }
      },
      "grantAdminRole(address)": {
        "custom:security": "Admins can withdraw excess funds but not user staked tokens",
        "details": "Only the owner can call this function. Admin will have withdrawal privileges.",
        "params": {
          "_admin": "The address to be granted admin privileges"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAdmin(address)": {
        "params": {
          "_address": "The address to check"
        },
        "returns": {
          "_0": "Whether the address has admin role"
        }
      },
      "isUnstakeLocked(address)": {
        "params": {
          "_user": "The address of the user"
        },
        "returns": {
          "_0": "True if the oldest unstake request is locked, false otherwise"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseStaking()": {
        "custom:security": "Emergency function to halt new staking during incidents",
        "details": "Only the owner can pause staking. Affects new stakes only."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "requestUnstake(uint256)": {
        "custom:effects": "Creates unstake request in FIFO queue with withdrawal delay",
        "custom:requirements": "User must have sufficient staked balance",
        "details": "Creates an unstake request that will be available for withdrawal after lockPeriod",
        "params": {
          "_amount": "The amount of tokens to request for unstaking"
        }
      },
      "requestUnstakeAll()": {
        "custom:effects": "Moves entire stake to unstake request queue with withdrawal delay",
        "custom:requirements": "User must have a non-zero stake balance",
        "details": "Creates an unstake request for the entire stake balance"
      },
      "revokeAdminRole(address)": {
        "details": "Only the owner can call this function",
        "params": {
          "_admin": "The address to have admin privileges revoked"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "stake(uint256)": {
        "custom:effects": "Increases user's stake balance and total staked amount",
        "custom:requirements": "Staking must not be paused and amount must be > 0",
        "details": "Transfers tokens from user to contract and updates staking balances",
        "params": {
          "_amount": "The amount of tokens to stake"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "params": {
          "newOwner": "The address of the new owner"
        }
      },
      "unpauseStaking()": {
        "details": "Only the owner can unpause staking."
      },
      "updateLockPeriod(uint256)": {
        "custom:bounds": "Lock period must be between MIN_LOCK_PERIOD and MAX_LOCK_PERIOD",
        "custom:security": "Only affects future stakes, existing stakes keep their original lock period",
        "details": "Only owner or admin can call this function. Does not affect existing stakes.",
        "params": {
          "_newLockPeriod": "The new lock period in seconds"
        }
      },
      "withdraw(uint256,address)": {
        "custom:effects": "Transfers excess vault tokens without affecting user balances",
        "custom:security": "Only allows withdrawal of excess funds beyond user stakes",
        "details": "Only owner or admin can withdraw. Cannot withdraw user staked tokens.",
        "params": {
          "_amount": "The amount of excess tokens to withdraw",
          "_to": "The address to receive the withdrawn tokens"
        }
      },
      "withdrawAllUnstake()": {
        "custom:effects": "Transfers all available tokens to user and removes processed requests",
        "custom:requirements": "User must have unlocked unstake requests",
        "details": "Processes all unlocked unstake requests in FIFO order"
      },
      "withdrawUnstake(uint256)": {
        "custom:effects": "Transfers tokens to user and removes processed requests from queue",
        "custom:requirements": "User must have sufficient unlocked unstake requests",
        "details": "Processes oldest unstake requests that have passed the lock period",
        "params": {
          "_amount": "The amount of tokens to withdraw from unstake requests"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelUnstake(uint256)": {
        "notice": "Cancels unstake requests and returns tokens to staked balance (LIFO)"
      },
      "getAllUserUnstakeRequests(address)": {
        "notice": "Gets all unstake requests for a user"
      },
      "getAvailableUnstakeAmount(address)": {
        "notice": "Gets the total available amount for withdrawal (unlocked requests)"
      },
      "getLockPeriod()": {
        "notice": "Gets the current lock period"
      },
      "getRemainingUnstakeLockTime(address)": {
        "notice": "Gets the remaining lock time for the oldest unstake request"
      },
      "getTotalUnstakeRequests()": {
        "notice": "Gets the total amount of tokens in unstake requests"
      },
      "getUnstakeUnlockTimestamp(address)": {
        "notice": "Gets the unlock timestamp for the oldest unstake request"
      },
      "getUserUnstakeRequest(address)": {
        "notice": "Gets the user's total unstake request amount"
      },
      "getUserUnstakeRequestByIndex(address,uint256)": {
        "notice": "Gets a specific unstake request by index"
      },
      "getUserUnstakeRequestCount(address)": {
        "notice": "Gets the number of unstake requests for a user"
      },
      "grantAdminRole(address)": {
        "notice": "Grants admin role to an address"
      },
      "isAdmin(address)": {
        "notice": "Checks if an address has admin role"
      },
      "isUnstakeLocked(address)": {
        "notice": "Checks if the oldest unstake request is currently locked"
      },
      "pauseStaking()": {
        "notice": "Pauses staking functionality"
      },
      "requestUnstake(uint256)": {
        "notice": "Requests to unstake a specific amount of tokens"
      },
      "requestUnstakeAll()": {
        "notice": "Requests to unstake all of the user's staked tokens"
      },
      "revokeAdminRole(address)": {
        "notice": "Revokes admin role from an address"
      },
      "stake(uint256)": {
        "notice": "Stakes tokens into the vault"
      },
      "transferOwnership(address)": {
        "notice": "Transfers ownership and admin role to a new owner"
      },
      "unpauseStaking()": {
        "notice": "Unpauses staking functionality"
      },
      "updateLockPeriod(uint256)": {
        "notice": "Updates the lock period for new stakes"
      },
      "withdraw(uint256,address)": {
        "notice": "Withdraws excess tokens from the vault (not user staked funds)"
      },
      "withdrawAllUnstake()": {
        "notice": "Withdraws all available tokens from completed unstake requests"
      },
      "withdrawUnstake(uint256)": {
        "notice": "Withdraws tokens from completed unstake requests (FIFO)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/staking/StakingVault.sol:StakingVault",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 396,
        "contract": "contracts/staking/StakingVault.sol:StakingVault",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 519,
        "contract": "contracts/staking/StakingVault.sol:StakingVault",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 620,
        "contract": "contracts/staking/StakingVault.sol:StakingVault",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2807,
        "contract": "contracts/staking/StakingVault.sol:StakingVault",
        "label": "userStakes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2813,
        "contract": "contracts/staking/StakingVault.sol:StakingVault",
        "label": "unstakeRequests",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_struct(UnstakeRequest)2800_storage)dyn_storage)"
      },
      {
        "astId": 2815,
        "contract": "contracts/staking/StakingVault.sol:StakingVault",
        "label": "totalStaked",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2817,
        "contract": "contracts/staking/StakingVault.sol:StakingVault",
        "label": "totalUnstakeRequests",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2819,
        "contract": "contracts/staking/StakingVault.sol:StakingVault",
        "label": "lockPeriod",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2821,
        "contract": "contracts/staking/StakingVault.sol:StakingVault",
        "label": "_nextUnstakeId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(UnstakeRequest)2800_storage)dyn_storage": {
        "base": "t_struct(UnstakeRequest)2800_storage",
        "encoding": "dynamic_array",
        "label": "struct StakingVault.UnstakeRequest[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(UnstakeRequest)2800_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingVault.UnstakeRequest[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(UnstakeRequest)2800_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/staking/StakingVault.sol:StakingVault",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/staking/StakingVault.sol:StakingVault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UnstakeRequest)2800_storage": {
        "encoding": "inplace",
        "label": "struct StakingVault.UnstakeRequest",
        "members": [
          {
            "astId": 2795,
            "contract": "contracts/staking/StakingVault.sol:StakingVault",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2797,
            "contract": "contracts/staking/StakingVault.sol:StakingVault",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2799,
            "contract": "contracts/staking/StakingVault.sol:StakingVault",
            "label": "id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}